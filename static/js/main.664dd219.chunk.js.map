{"version":3,"sources":["Constants.js","App.js","serviceWorker.js","index.js"],"names":["config","url","API_URL","API_URL_USERS","axios","require","default","URL","App","onGetStickiesClick","event","getStickies","onLogoutButtonClick","localStorage","removeItem","setState","stickies","user","onSubmitNewSticky","state","newStickyBody","preventDefault","token","getItem","post","body","headers","then","response","data","sticky","catch","e","console","log","onClickMyStickies","getMyStickies","onChangeNewStickyBody","target","value","code","window","location","href","match","get","name","username","avatar_url","setItem","auth_code","Authorization","this","map","key","id","process","onClick","src","alt","onSubmit","htmlFor","type","onChange","React","Component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.664dd219.chunk.js","sourcesContent":["const prod = {\n  url: {\n    API_URL: 'https://myapp.herokuapp.com',\n    API_URL_USERS: 'https://myapp.herokuapp.com/users'\n  }\n};\n\nconst dev = {\n  url: {\n    API_URL: 'http://localhost:5000'\n  }\n};\n\nexport const config = process.env.NODE_ENV === 'development' ? dev : prod;","import React, { useEffect } from 'react';\nimport './App.css';\nimport { config } from './Constants'\nconst axios = require('axios').default;\n\nconst URL = config.url.API_URL\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      stickies: [],\n      newStickyBody: ''\n    }\n  }\n\n  componentDidMount() {\n    const code =\n      window.location.href.match(/\\/?code=(.*)/) &&\n      window.location.href.match(/\\/?code=(.*)/)[1];\n\n    const token = localStorage.getItem('DASHNOTES_AUTH_CODE');\n\n    if (token) {\n\n      axios.get(`${URL}/users`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      })\n      .then((response) => {\n        this.setState({\n          user: {\n            name: response.data.name,\n            username: response.data.username,\n            avatar_url: response.data.avatar_url\n          },\n          stickies: response.data.stickies\n        });\n      })\n      .catch((e) => { console.log('getting details about the user from be didn\\'t work', e); });\n    } else if (code) {\n      axios.post(`${URL}/auth/callback/gh/${code}`, {\n        code: code,\n      }, {\n        headers: { \"Access-Control-Allow-Headers\": \"X-Requested-With, content-type\" }\n      })\n      .then((response) => {\n        this.setState({\n          user: {\n            name: response.data.name,\n            username: response.data.username,\n            avatar_url: response.data.avatar_url\n          },\n          stickies: response.data.stickies\n        });\n        localStorage.setItem('DASHNOTES_AUTH_CODE', response.data.auth_code);\n      })\n      .catch((e) => { console.log(\"going through gh oauth cycle without saved login info didn't work\", e);})\n    } else {\n      console.log(\"no login info saved, or haven't just gone through gh oauth callback\");\n    }\n  }\n\n  getStickies() {\n    const token = localStorage.getItem('DASHNOTES_AUTH_CODE')\n    axios.get(`${URL}/stickies`, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    })\n    .then((response) => {\n      this.setState({\n        stickies: response.data.stickies\n      })\n    })\n    .catch((e) => { console.log(\"getting all stickies didn't work\", e); });\n  }\n\n  getMyStickies() {\n    const token = localStorage.getItem('DASHNOTES_AUTH_CODE')\n    axios.get(`${URL}/my-stickies`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    })\n    .then((response) => {\n      this.setState({\n        stickies: response.data.stickies\n      })\n    })\n    .catch((e) => { console.log(\"getting my stickies didn't work\", e); });\n  }\n  \n  onGetStickiesClick = (event) => {\n    this.getStickies();\n  }\n\n  onLogoutButtonClick = (event) => {\n    localStorage.removeItem('DASHNOTES_AUTH_CODE');\n    this.setState({\n      stickies: [],\n      user: null\n    })\n  }\n\n  onSubmitNewSticky = (event) => {\n    if (this.state.newStickyBody === '') { return; }\n    event.preventDefault();\n\n    const token = localStorage.getItem('DASHNOTES_AUTH_CODE')\n    axios.post(`${URL}/my-stickies`, {\n      body: this.state.newStickyBody\n    }, {\n      headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }})\n    .then((response) => {\n      this.setState({\n        stickies: [...this.state.stickies, response.data.sticky]\n      })\n    })\n    .catch((e) => { console.log(\"creating a new sticky didn't work\", e); });\n  }\n\n  onClickMyStickies = (event) => {\n    this.getMyStickies();\n  }\n\n  onChangeNewStickyBody = (event) => {\n    this.setState({\n      newStickyBody: event.target.value\n    })\n  }\n\n  render() {\n    const stickies = this.state.stickies.map( (sticky) => {\n      return (<li key={sticky.id}>\n        <p>{sticky.body}</p>\n        <p>{sticky.username}</p>\n      </li>)\n    })\n\n    const CLIENT_ID = process.env.REACT_APP_GITHUB_CLIENT_ID\n\n    return (\n      <div>\n\n        <nav>\n          <ul>\n            <li>\n              <a href={`https://github.com/login/oauth/authorize?client_id=${CLIENT_ID}`}>Login to GitHub</a>\n            </li>\n            <li>\n              <button onClick={this.onLogoutButtonClick}>Log Out</button>\n            </li>\n          </ul>\n        </nav>\n\n\n        <section>\n          <h1>Welcome{ this.state.user ? ` back, ${this.state.user.name} (${this.state.user.username})!` : '!'}</h1>\n          { this.state.user ? <img src={this.state.user.avatar_url} alt=\"lol\" /> : '' }\n        </section>\n\n\n        <section>\n          <h2>My Stickies</h2>\n          <ul>\n            {stickies}\n          </ul>\n          <form onSubmit={this.onSubmitNewSticky}>\n            <h3>\n              <label htmlFor=\"new-sticky\">Write a New Sticky</label>\n            </h3>\n            <input type=\"text\" onChange={this.onChangeNewStickyBody} name=\"new-sticky\"></input>\n            <input type=\"submit\"></input>\n          </form>\n        </section>\n\n\n        <button onClick={this.onGetStickiesClick}>Get ALL Stickies</button>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}